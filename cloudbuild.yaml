# cloudbuild.yaml
logsBucket: 'gs://apigee-sdlc-demo_cloudbuild'

steps:
  # Step 0: Clone the repository (this step is automatically added by Cloud Build if a repository trigger is used)
  - name: 'gcr.io/cloud-builders/git'
    args: ['clone', '--branch=master', 'https://github.com/afgates-google/apigee-proxy.git', 'apigee-proxies']  # Replace with your branch and repository URL
    id: 'clone-repo'

  # Step 1: Install Node.js and npm (using a specific Node.js version)
  - name: 'node'  # Use a specific Node.js version (20 or higher)
    entrypoint: 'npm'
    args: ['install', '-g', 'npm@latest']  # Optional: Ensure latest npm (might not be necessary)
    env:
      - 'NPM_CONFIG_UPDATE_NOTIFIER=false' # Suppress npm update messages

  # Step 2: Install apigeelint
  - name: 'node'  # Use the same Node.js version
    entrypoint: 'npm'
    args: ['install', '-g', 'apigeelint']

  # Step 3: Run apigeelint (ignore errors)
  - name: 'node'  # Use the same Node.js version
    entrypoint: 'bash'  # Use bash to execute a command and control the exit code
    args:
      - '-c'
      - |
        npx apigeelint -s apigee-proxies/apiproxy -f table.js || true  # Run apigeelint and ignore its exit code
    id: 'apigeelint'

# Step 4: Deploy the Apigee proxy (conditional execution)
  - name: 'gcr.io/cloud-builders/gcloud'  # Assuming you're using gcloud for deployment
    args:
      - 'apigee'
      - 'deploy'
      - '--organization=apigee-sdlc-demo'  # Replace with your organization ID
      - '--environment=eval'  # Replace with your environment name
      - '--api=cloud-build-apigee-proxy'  # Replace with your proxy name
      - '--shared-flows=false'  # Set to true if deploying a shared flow
      - '--source=apigee-proxies/apiproxy'  # Path to the proxy bundle
    waitFor: ['apigeelint']  # Wait for the apigeelint step to complete
    id: 'deploy-proxy'
    entrypoint: 'gcloud'
    # Add this line to execute only if apigeelint succeeds:
    # status: ['SUCCESS']  # This line is not valid, use waitFor instead